#pragma repy restrictions.test dylink.r2py

"""
Author: Justin Cappos
Description:
This test splits a vessel into two, and joins the resulting vessels back together. The test then verifies that the restrictions of the vessel are the same as they were at the beggining.
"""

my_name=getmyip()

time = dy_import_module("time.r2py")
nmclient = dy_import_module("nmclient.r2py")


def get_restrictions(resourcestring):
  restrictionsstring = ''

  for line in resourcestring.split('\n'):
    if 'resource' in line:
      continue

    restrictionsstring = restrictionsstring + line + '\n'

  return restrictionsstring



if callfunc == 'initialize':

  pubkey = {'e': 1515278400394037168869631887206225761783197636247636149274740854708478416229147500580877416652289990968676310353790883501744269103521055894342395180721167L, 'n': 8811850224687278929671477591179591903829730117649785862652866020803862826558480006479605958786097112503418194852731900367494958963787480076175614578652735061071079458992502737148356289391380249696938882025028801032667062564713111819847043202173425187133883586347323838509679062142786013585264788548556099117804213139295498187634341184917970175566549405203725955179602584979965820196023950630399933075080549044334508921319264315718790337460536601263126663173385674250739895046814277313031265034275415434440823182691254039184953842629364697394327806074576199279943114384828602178957150547925812518281418481896604655037L}

  time.time_updatetime(34612)
  nmhandle = nmclient.nmclient_createhandle(my_name, 1224)
  
  myhandleinfo = nmclient.nmclient_get_handle_info(nmhandle)

  myhandleinfo['publickey'] = pubkey

  myhandleinfo['privatekey'] = {'q': 54058458609373005761636236344701348569916976061233632302656354317296914836524068463339023907975088241991695932495814481647444694298985642399081803007236201209469946258941304883759055364999601996691930482382846773100579600645226048615117420700557109784424679718473031043919444221865548436936151591443700338637L, 'p': 163005946735584933080904947630005844643976533101833337498275325109161034533761907731163804211972028706576149578068245770343911608552263828770803393409524864116386113730846986186991705365903821748069417335817777744060812709585990055899981036005918570773920278122250955465866247822703170432353212868019982497201L, 'd': 2240169959722743128383109799584344927620631289695753164608137553948562513840905705755472646965204244185778446323692147882435315849145863268402636875283224769523136754021661455550898853194946272632624967823932300133454648259819576163836968537588009990175504497443778516954738281566994011669204200464480373455393955376955298830900816876217755539224711550233098080437180969137329334691279693903616444969433587901167778818088572448203744563568733073397445832643374417179790887207750843422586891294093361764515116975052446191135748633217162309228939861802346846701415099277659436864814394138247474263285983065177006045103L}

  nmclient.nmclient_set_handle_info(nmhandle, myhandleinfo)


  resourcedata = """
resource cpu .01
resource memory 10000000   # 10 MiB
resource diskused 8000000 # 8 MiB
resource events 5
resource filewrite 10000
resource fileread 10000
resource filesopened 2
resource insockets 2
resource outsockets 2
resource netsend 10000
resource netrecv 10000
resource loopsend 100000
resource looprecv 100000
resource lograte 3000
resource random 10
resource messport 12345
resource messport 12346
resource connport 12345
resource connport 12346
"""


  # get the vessel to use...
  myvessel = nmclient.nmclient_listaccessiblevessels(nmhandle,pubkey)[0][0]

  starting_fullresourcedata = nmclient.nmclient_rawsay(nmhandle, "GetVesselResources",myvessel)
  startingrestrictions = get_restrictions(starting_fullresourcedata)
  starting_restriction_list_full = startingrestrictions.split('\n')
  starting_restriction_list = []
  
  # Build a restrictions list.
  for restriction in starting_restriction_list_full:
    clean_restriction = restriction.split('#')[0]
    if clean_restriction:
      starting_restriction_list.append(clean_restriction)

  nmclient.nmclient_signedsay(nmhandle, "SplitVessel", myvessel, resourcedata)

  mynewvessels = nmclient.nmclient_listaccessiblevessels(nmhandle,pubkey)[0][:2]

  nmclient.nmclient_rawsay(nmhandle, "GetVesselResources",mynewvessels[0])
  nmclient.nmclient_rawsay(nmhandle, "GetVesselResources",mynewvessels[1])
  nmclient.nmclient_signedsay(nmhandle, "JoinVessels", mynewvessels[0], mynewvessels[1])


  mynewestvessel = nmclient.nmclient_listaccessiblevessels(nmhandle,pubkey)[0][0]
  ending_fullresourcedata = nmclient.nmclient_rawsay(nmhandle, "GetVesselResources",mynewestvessel)
  endingrestrictions = get_restrictions(ending_fullresourcedata)
  endingrestriction_list_full = endingrestrictions.split('\n')
  endingrestriction_list = []

  # Build a restrictions list.
  for restriction in endingrestriction_list_full:
    clean_restriction = restriction.split('#')[0]
    if clean_restriction:
      endingrestriction_list.append(clean_restriction)


  # commented out print statement so test does not result in failure when automatically run
  # log("Warning, this test does not check vessel resource sizes...\n")

  # Go through all the restrictions from the starting restrictions file, and
  # ensure that they all exist in the final restrictions.
  for cur_restriction in starting_restriction_list:
    if not cur_restriction:
      continue

    if cur_restriction not in endingrestriction_list:
      raise Exception, "Restrictions are not preserved!"  

    
